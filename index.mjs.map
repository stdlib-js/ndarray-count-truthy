{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js","../lib/assign.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { primitives as isIntegerArray } from '@stdlib/assert-is-integer-array';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport normalizeIndices from '@stdlib/ndarray-base-to-unique-normalized-indices';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Options} options - function options\n* @param {boolean} [options.keepdims] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'keepdims': true\n* };\n* var err = validate( opts, 3, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'keepdims' ) ) {\n\t\topts.keepdims = options.keepdims;\n\t\tif ( !isBoolean( opts.keepdims ) ) {\n\t\t\treturn new TypeError( format( 'null2o', 'keepdims', opts.keepdims ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length > ndims ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option specifies more dimensions than exists in the input array. Number of dimensions: %d. Option: [%s].', ndims, join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport unaryReduceSubarray from '@stdlib/ndarray-base-unary-reduce-subarray';\nimport base from '@stdlib/ndarray-base-count-truthy';\nimport spreadDimensions from '@stdlib/ndarray-base-spread-dimensions';\nimport indicesComplement from '@stdlib/array-base-indices-complement';\nimport getShape from '@stdlib/ndarray-shape'; // note: non-base accessor is intentional due to the input array originating in userland\nimport getOrder from '@stdlib/ndarray-base-order';\nimport empty from '@stdlib/ndarray-empty';\nimport defaults from '@stdlib/ndarray-defaults';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport objectAssign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport DEFAULTS from './defaults.json';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\nvar DEFAULT_DTYPE = defaults.get( 'dtypes.integer_index' );\n\n\n// MAIN //\n\n/**\n* Counts the number of truthy elements along one or more ndarray dimensions.\n*\n* @param {ndarray} x - input ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-ctor';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform operation:\n* var out = countTruthy( x );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns 5\n*/\nfunction countTruthy( x, options ) {\n\tvar opts;\n\tvar err;\n\tvar idx;\n\tvar shx;\n\tvar shy;\n\tvar N;\n\tvar y;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\tshx = getShape( x );\n\tN = shx.length;\n\n\topts = objectAssign( {}, DEFAULTS );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, N, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input array across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the list of non-reduced dimensions:\n\tidx = indicesComplement( N, opts.dims );\n\n\t// Resolve the output array shape:\n\tshy = takeIndexed( shx, idx );\n\n\t// Initialize an output array whose shape matches that of the non-reduced dimensions and which has the same memory layout as the input array:\n\ty = empty( shy, {\n\t\t'dtype': DEFAULT_DTYPE,\n\t\t'order': getOrder( x )\n\t});\n\n\t// Perform the reduction:\n\tunaryReduceSubarray( base, [ x, y ], opts.dims );\n\n\t// Check whether we need to reinsert singleton dimensions which can be useful for broadcasting the returned output array to the shape of the original input array...\n\tif ( opts.keepdims ) {\n\t\ty = spreadDimensions( N, y, idx );\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default countTruthy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport unaryReduceSubarray from '@stdlib/ndarray-base-unary-reduce-subarray';\nimport ndims from '@stdlib/ndarray-ndims';\nimport base from '@stdlib/ndarray-base-count-truthy';\nimport objectAssign from '@stdlib/object-assign';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport defaults from './defaults.json';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Counts the number of truthy elements along one or more ndarray dimensions and assigns the results to a provided output ndarray.\n*\n* @param {ndarray} x - input ndarray\n* @param {ndarray} y - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} second argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-ctor';\n* import empty from '@stdlib/ndarray-empty';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, shape, sx, ox, 'row-major' );\n*\n* // Create an output ndarray:\n* var y = empty( [], {\n*     'dtype': 'int32'\n* });\n*\n* // Perform operation:\n* var out = assign( x, y );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns 5\n*/\nfunction assign( x, y, options ) {\n\tvar opts;\n\tvar err;\n\tvar N;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\tif ( !isndarrayLike( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', y ) );\n\t}\n\tN = ndims( x );\n\n\topts = objectAssign( {}, defaults );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, N, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\tunaryReduceSubarray( base, [ x, y ], opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Count the number of truthy elements along one or more ndarray dimensions.\n*\n* @module @stdlib/ndarray-count-truthy\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-ctor';\n* import countTruthy from '@stdlib/ndarray-count-truthy';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Perform operation:\n* var out = countTruthy( x );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns 5\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray from '@stdlib/ndarray-ctor';\n* import empty from '@stdlib/ndarray-empty';\n* import countTruthy from '@stdlib/ndarray-count-truthy';\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Define the shape of the input array:\n* var shape = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, shape, sx, ox, 'row-major' );\n*\n* // Create an output ndarray:\n* var y = empty( [], {\n*     'dtype': 'int32'\n* });\n*\n* // Perform operation:\n* var out = countTruthy.assign( x, y );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns 5\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\" }\n"],"names":["validate","opts","ndims","options","tmp","isObject","TypeError","format","hasOwnProp","keepdims","isBoolean","dims","isIntegerArray","isEmptyCollection","normalizeIndices","RangeError","join","length","Error","DEFAULT_DTYPE","defaults","get","countTruthy","x","err","idx","shx","shy","N","y","isndarrayLike","getShape","objectAssign","DEFAULTS","arguments","zeroTo","indicesComplement","takeIndexed","empty","dtype","order","getOrder","unaryReduceSubarray","base","spreadDimensions","assign","setReadOnly","main"],"mappings":";;+nEAuDA,SAASA,EAAUC,EAAMC,EAAOC,GAC/B,IAAIC,EACJ,IAAMC,EAAUF,GACf,OAAO,IAAIG,UAAWC,EAAQ,SAAUJ,IAEzC,GAAKK,EAAYL,EAAS,cACzBF,EAAKQ,SAAWN,EAAQM,UAClBC,EAAWT,EAAKQ,WACrB,OAAO,IAAIH,UAAWC,EAAQ,SAAU,WAAYN,EAAKQ,WAG3D,GAAKD,EAAYL,EAAS,QAAW,CAEpC,GADAF,EAAKU,KAAOR,EAAQQ,MACdC,EAAgBX,EAAKU,QAAWE,EAAmBZ,EAAKU,MAC7D,OAAO,IAAIL,UAAWC,EAAQ,0EAA2E,OAAQN,EAAKU,OAGvH,GAAa,QADbP,EAAMU,EAAkBb,EAAKU,KAAMT,EAAM,IAExC,OAAO,IAAIa,WAAYR,EAAQ,uFAAwF,OAAQS,EAAMf,EAAKU,KAAM,OAEjJ,GAAKP,EAAIa,SAAWhB,EAAKU,KAAKM,OAC7B,OAAO,IAAIC,MAAOX,EAAQ,wEAAyE,OAAQS,EAAMf,EAAKU,KAAM,OAE7H,GAAKP,EAAIa,OAASf,EACjB,OAAO,IAAIa,WAAYR,EAAQ,gIAAiIL,EAAOc,EAAMf,EAAKU,KAAM,OAEzLV,EAAKU,KAAOP,CACZ,CACD,OAAO,IACR,CC3CA,IAAIe,EAAgBC,EAASC,IAAK,wBA6ClC,SAASC,EAAaC,EAAGpB,GACxB,IAAIF,EACAuB,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAeP,GACpB,MAAM,IAAIjB,UAAWC,EAAQ,SAAUgB,IAMxC,GAHAK,GADAF,EAAMK,EAAUR,IACRN,OAERhB,EAAO+B,EAAc,GAAIC,GACpBC,UAAUjB,OAAS,IACvBO,EAAMxB,EAAUC,EAAM2B,EAAGzB,IAExB,MAAMqB,EA0BR,OAtBmB,OAAdvB,EAAKU,OACTV,EAAKU,KAAOwB,EAAQP,IAGrBH,EAAMW,EAAmBR,EAAG3B,EAAKU,MAGjCgB,EAAMU,EAAaX,EAAKD,GAGxBI,EAAIS,EAAOX,EAAK,CACfY,MAASpB,EACTqB,MAASC,EAAUlB,KAIpBmB,EAAqBC,EAAM,CAAEpB,EAAGM,GAAK5B,EAAKU,MAGrCV,EAAKQ,WACToB,EAAIe,EAAkBhB,EAAGC,EAAGJ,IAEtBI,CACR,CCpDA,SAASgB,EAAQtB,EAAGM,EAAG1B,GACtB,IAAIF,EACAuB,EACAI,EAEJ,IAAME,EAAeP,GACpB,MAAM,IAAIjB,UAAWC,EAAQ,SAAUgB,IAExC,IAAMO,EAAeD,GACpB,MAAM,IAAIvB,UAAWC,EAAQ,iFAAkFsB,IAKhH,GAHAD,EAAI1B,EAAOqB,GAEXtB,EAAO+B,EAAc,GAAIZ,GACpBc,UAAUjB,OAAS,IACvBO,EAAMxB,EAAUC,EAAM2B,EAAGzB,IAExB,MAAMqB,EAOR,OAJmB,OAAdvB,EAAKU,OACTV,EAAKU,KAAOwB,EAAQP,IAErBc,EAAqBC,EAAM,CAAEpB,EAAGM,GAAK5B,EAAKU,MACnCkB,CACR,CCVAiB,EAAAC,EAAA,SAAAF"}